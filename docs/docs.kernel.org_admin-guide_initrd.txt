   #[1]Index [2]Search [3]I/O statistics fields [4]Hardware random number
   generators

[5]The Linux Kernel

   6.3.0

Quick search

   ____________________ Go

Contents

   [X]
     * [6]A guide to the Kernel Development Process
     * [7]Submitting patches: the essential guide to getting your code
       into the kernel
     * [8]Code of conduct
     * [9]Kernel Maintainer Handbook
     * [10]All development-process docs

     * [11]Core API Documentation
     * [12]Driver implementer's API guide
     * [13]Kernel subsystem documentation
     * [14]Locking in the kernel

     * [15]Linux kernel licensing rules
     * [16]How to write kernel documentation
     * [17]Development tools for the kernel
     * [18]Kernel Testing Guide
     * [19]Kernel Hacking Guides
     * [20]Linux Tracing Technologies
     * [21]fault-injection
     * [22]Kernel Livepatching
     * [23]Rust

     * [24]The Linux kernel user's and administrator's guide
          + [25]Linux kernel release 6.x <http://kernel.org/>
          + [26]The kernel's command-line parameters
          + [27]Linux allocated devices (4.x+ version)
          + [28]Documentation for /proc/sys
          + [29]Linux ABI description
          + [30]Feature status on all architectures
          + [31]Hardware vulnerabilities
          + [32]Reporting issues
          + [33]Reporting regressions
          + [34]Bug hunting
          + [35]Bisecting a bug
          + [36]Tainted kernels
          + [37]Ramoops oops/panic logger
          + [38]Dynamic debug
          + [39]Explaining the "No working init found." boot hang message
          + [40]Documentation for Kdump - The kexec-based Crash Dumping
            Solution
          + [41]Performance monitor support
          + [42]pstore block oops/panic logger
          + [43]Rules on how to access information in sysfs
          + [44]Discovering Linux kernel subsystems used by a workload
          + [45]ACPI Support
          + [46]ATA over Ethernet (AoE)
          + [47]Auxiliary Display Support
          + [48]A block layer cache (bcache)
          + [49]The Android binderfs Filesystem
          + [50]Kernel Support for miscellaneous Binary Formats
            (binfmt_misc)
          + [51]Block Devices
          + [52]Boot Configuration
          + [53]Linux Braille Console
          + [54]btmrvl driver
          + [55]Control Groups version 1
          + [56]Control Group v2
          + [57]CIFS
          + [58]Clearing WARN_ONCE
          + [59]CPU load
          + [60]How CPU topology info is exported via sysfs
          + [61]Dell Remote BIOS Update driver (dell_rbu)
          + [62]Device Mapper
          + [63]EDID
          + [64]The EFI Boot Stub
          + [65]ext4 General Information
          + [66]File system Monitoring with fanotify
          + [67]NFS
          + [68]gpio
          + [69]Notes on the change from 16-bit UIDs to 32-bit UIDs
          + [70]Hardware random number generators
          + [71]Using the initial RAM disk (initrd)
               o [72]Operation
               o [73]Boot command-line options
               o [74]Compressed cpio images
               o [75]Installation
               o [76]Changing the root device
               o [77]Usage scenarios
               o [78]Obsolete root change mechanism
               o [79]Mixed change_root and pivot_root mechanism
               o [80]Resources
          + [81]I/O statistics fields
          + [82]Java(tm) Binary Kernel Support for Linux v1.03
          + [83]IBM's Journaled File System (JFS) for Linux
          + [84]Reducing OS jitter due to per-cpu kthreads
          + [85]Laptop Drivers
          + [86]Parallel port LCD/Keypad Panel support
          + [87]LDM - Logical Disk Manager (Dynamic Disks)
          + [88]Softlockup detector and hardlockup detector (aka
            nmi_watchdog)
          + [89]Linux Security Module Usage
          + [90]RAID arrays
          + [91]Media subsystem admin and user guide
          + [92]Memory Management
          + [93]Kernel module signing facility
          + [94]Mono(tm) Binary Kernel Support for Linux
          + [95]Namespaces
          + [96]Numa policy hit/miss statistics
          + [97]Parport
          + [98]Perf events and tool security
          + [99]Power Management
          + [100]Linux Plug and Play Documentation
          + [101]RapidIO Subsystem Guide
          + [102]Reliability, Availability and Serviceability
          + [103]Real Time Clock (RTC) Drivers for Linux
          + [104]Linux Serial Console
          + [105]Video Mode Selection Support 2.13
          + [106]Syscall User Dispatch
          + [107]Linux Magic System Request Key Hacks
          + [108]Thermal Subsystem
          + [109]USB4 and Thunderbolt
          + [110]Using UFS
          + [111]Unicode support
          + [112]Software cursor for VGA
          + [113]Video Output Switcher Control
          + [114]The SGI XFS Filesystem
     * [115]The kernel build system
     * [116]Reporting issues
     * [117]User-space tools
     * [118]The Linux kernel user-space API guide

     * [119]The Linux kernel firmware guide
     * [120]Open Firmware and Devicetree

     * [121]CPU Architectures

     * [122]Unsorted Documentation

     * [123]Translations

This Page

     * [124]Show Source

Using the initial RAM disk (initrd)[125]¶

   Written 1996,2000 by Werner Almesberger
   <[126]werner.almesberger@epfl.ch> and Hans Lermen <[127]lermen@fgan.de>

   initrd provides the capability to load a RAM disk by the boot loader.
   This RAM disk can then be mounted as the root file system and programs
   can be run from it. Afterwards, a new root file system can be mounted
   from a different device. The previous root (from initrd) is then moved
   to a directory and can be subsequently unmounted.

   initrd is mainly designed to allow system startup to occur in two
   phases, where the kernel comes up with a minimum set of compiled-in
   drivers, and where additional modules are loaded from initrd.

   This document gives a brief overview of the use of initrd. A more
   detailed discussion of the boot process can be found in [128]1.

Operation[129]¶

   When using initrd, the system typically boots as follows:

    1. the boot loader loads the kernel and the initial RAM disk
    2. the kernel converts initrd into a "normal" RAM disk and frees the
       memory used by initrd
    3. if the root device is not /dev/ram0, the old (deprecated)
       change_root procedure is followed. see the "Obsolete root change
       mechanism" section below.
    4. root device is mounted. if it is /dev/ram0, the initrd image is
       then mounted as root
    5. /sbin/init is executed (this can be any valid executable, including
       shell scripts; it is run with uid 0 and can do basically everything
       init can do).
    6. init mounts the "real" root file system
    7. init places the root file system at the root directory using the
       pivot_root system call
    8. init execs the /sbin/init on the new root filesystem, performing
       the usual boot sequence
    9. the initrd file system is removed

   Note that changing the root directory does not involve unmounting it.
   It is therefore possible to leave processes running on initrd during
   that procedure. Also note that file systems mounted under initrd
   continue to be accessible.

Boot command-line options[130]¶

   initrd adds the following new options:
initrd=<path>    (e.g. LOADLIN)

  Loads the specified file as the initial RAM disk. When using LILO, you
  have to specify the RAM disk image file in /etc/lilo.conf, using the
  INITRD configuration variable.

noinitrd

  initrd data is preserved but it is not converted to a RAM disk and
  the "normal" root file system is mounted. initrd data can be read
  from /dev/initrd. Note that the data in initrd can have any structure
  in this case and doesn't necessarily have to be a file system image.
  This option is used mainly for debugging.

  Note: /dev/initrd is read-only and it can only be used once. As soon
  as the last process has closed it, all data is freed and /dev/initrd
  can't be opened anymore.

root=/dev/ram0

  initrd is mounted as root, and the normal boot procedure is followed,
  with the RAM disk mounted as root.

Compressed cpio images[131]¶

   Recent kernels have support for populating a ramdisk from a compressed
   cpio archive. On such systems, the creation of a ramdisk image doesn't
   need to involve special block devices or loopbacks; you merely create a
   directory on disk with the desired initrd content, cd to that
   directory, and run (as an example):
find . | cpio --quiet -H newc -o | gzip -9 -n > /boot/imagefile.img

   Examining the contents of an existing image file is just as simple:
mkdir /tmp/imagefile
cd /tmp/imagefile
gzip -cd /boot/imagefile.img | cpio -imd --quiet

Installation[132]¶

   First, a directory for the initrd file system has to be created on the
   "normal" root file system, e.g.:
# mkdir /initrd

   The name is not relevant. More details can be found on the
   pivot_root(2) man page.

   If the root file system is created during the boot procedure (i.e. if
   you're building an install floppy), the root file system creation
   procedure should create the /initrd directory.

   If initrd will not be mounted in some cases, its content is still
   accessible if the following device has been created:
# mknod /dev/initrd b 1 250
# chmod 400 /dev/initrd

   Second, the kernel has to be compiled with RAM disk support and with
   support for the initial RAM disk enabled. Also, at least all components
   needed to execute programs from initrd (e.g. executable format and file
   system) must be compiled into the kernel.

   Third, you have to create the RAM disk image. This is done by creating
   a file system on a block device, copying files to it as needed, and
   then copying the content of the block device to the initrd file. With
   recent kernels, at least three types of devices are suitable for that:

     * a floppy disk (works everywhere but it's painfully slow)
     * a RAM disk (fast, but allocates physical memory)
     * a loopback device (the most elegant solution)

   We'll describe the loopback device method:

    1. make sure loopback block devices are configured into the kernel
    2. create an empty file system of the appropriate size, e.g.:
# dd if=/dev/zero of=initrd bs=300k count=1
# mke2fs -F -m0 initrd

       (if space is critical, you may want to use the Minix FS instead of
       Ext2)
    3. mount the file system, e.g.:
# mount -t ext2 -o loop initrd /mnt

    4. create the console device:
# mkdir /mnt/dev
# mknod /mnt/dev/console c 5 1

    5. copy all the files that are needed to properly use the initrd
       environment. Don't forget the most important file, /sbin/init
       Note
       /sbin/init permissions must include "x" (execute).
    6. correct operation the initrd environment can frequently be tested
       even without rebooting with the command:
# chroot /mnt /sbin/init

       This is of course limited to initrds that do not interfere with the
       general system state (e.g. by reconfiguring network interfaces,
       overwriting mounted devices, trying to start already running
       demons, etc. Note however that it is usually possible to use
       pivot_root in such a chroot'ed initrd environment.)
    7. unmount the file system:
# umount /mnt

    8. the initrd is now in the file "initrd". Optionally, it can now be
       compressed:
# gzip -9 initrd

   For experimenting with initrd, you may want to take a rescue floppy and
   only add a symbolic link from /sbin/init to /bin/sh. Alternatively, you
   can try the experimental newlib environment [133]2 to create a small
   initrd.

   Finally, you have to boot the kernel and load initrd. Almost all Linux
   boot loaders support initrd. Since the boot process is still compatible
   with an older mechanism, the following boot command line parameters
   have to be given:
root=/dev/ram0 rw

   (rw is only necessary if writing to the initrd file system.)

   With LOADLIN, you simply execute:
LOADLIN <kernel> initrd=<disk_image>

   e.g.:
LOADLIN C:\LINUX\BZIMAGE initrd=C:\LINUX\INITRD.GZ root=/dev/ram0 rw

   With LILO, you add the option INITRD=<path> to either the global
   section or to the section of the respective kernel in /etc/lilo.conf,
   and pass the options using APPEND, e.g.:
image = /bzImage
  initrd = /boot/initrd.gz
  append = "root=/dev/ram0 rw"

   and run /sbin/lilo

   For other boot loaders, please refer to the respective documentation.

   Now you can boot and enjoy using initrd.

Changing the root device[134]¶

   When finished with its duties, init typically changes the root device
   and proceeds with starting the Linux system on the "real" root device.

   The procedure involves the following steps:

          + mounting the new root file system
          + turning it into the root file system
          + removing all accesses to the old (initrd) root file system
          + unmounting the initrd file system and de-allocating the RAM
            disk

   Mounting the new root file system is easy: it just needs to be mounted
   on a directory under the current root. Example:
# mkdir /new-root
# mount -o ro /dev/hda1 /new-root

   The root change is accomplished with the pivot_root system call, which
   is also available via the pivot_root utility (see pivot_root(8) man
   page; pivot_root is distributed with util-linux version 2.10h or higher
   [135]3). pivot_root moves the current root to a directory under the new
   root, and puts the new root at its place. The directory for the old
   root must exist before calling pivot_root. Example:
# cd /new-root
# mkdir initrd
# pivot_root . initrd

   Now, the init process may still access the old root via its executable,
   shared libraries, standard input/output/error, and its current root
   directory. All these references are dropped by the following command:
# exec chroot . what-follows <dev/console >dev/console 2>&1

   Where what-follows is a program under the new root, e.g. /sbin/init If
   the new root file system will be used with udev and has no valid /dev
   directory, udev must be initialized before invoking chroot in order to
   provide /dev/console.

   Note: implementation details of pivot_root may change with time. In
   order to ensure compatibility, the following points should be observed:

     * before calling pivot_root, the current directory of the invoking
       process should point to the new root directory
     * use . as the first argument, and the _relative_ path of the
       directory for the old root as the second argument
     * a chroot program must be available under the old and the new root
     * chroot to the new root afterwards
     * use relative paths for dev/console in the exec command

   Now, the initrd can be unmounted and the memory allocated by the RAM
   disk can be freed:
# umount /initrd
# blockdev --flushbufs /dev/ram0

   It is also possible to use initrd with an NFS-mounted root, see the
   pivot_root(8) man page for details.

Usage scenarios[136]¶

   The main motivation for implementing initrd was to allow for modular
   kernel configuration at system installation. The procedure would work
   as follows:

    1. system boots from floppy or other media with a minimal kernel (e.g.
       support for RAM disks, initrd, a.out, and the Ext2 FS) and loads
       initrd
    2. /sbin/init determines what is needed to (1) mount the "real" root
       FS (i.e. device type, device drivers, file system) and (2) the
       distribution media (e.g. CD-ROM, network, tape, ...). This can be
       done by asking the user, by auto-probing, or by using a hybrid
       approach.
    3. /sbin/init loads the necessary kernel modules
    4. /sbin/init creates and populates the root file system (this doesn't
       have to be a very usable system yet)
    5. /sbin/init invokes pivot_root to change the root file system and
       execs - via chroot - a program that continues the installation
    6. the boot loader is installed
    7. the boot loader is configured to load an initrd with the set of
       modules that was used to bring up the system (e.g. /initrd can be
       modified, then unmounted, and finally, the image is written from
       /dev/ram0 or /dev/rd/0 to a file)
    8. now the system is bootable and additional installation tasks can be
       performed

   The key role of initrd here is to re-use the configuration data during
   normal system operation without requiring the use of a bloated
   "generic" kernel or re-compiling or re-linking the kernel.

   A second scenario is for installations where Linux runs on systems with
   different hardware configurations in a single administrative domain. In
   such cases, it is desirable to generate only a small set of kernels
   (ideally only one) and to keep the system-specific part of
   configuration information as small as possible. In this case, a common
   initrd could be generated with all the necessary modules. Then, only
   /sbin/init or a file read by it would have to be different.

   A third scenario is more convenient recovery disks, because information
   like the location of the root FS partition doesn't have to be provided
   at boot time, but the system loaded from initrd can invoke a
   user-friendly dialog and it can also perform some sanity checks (or
   even some form of auto-detection).

   Last not least, CD-ROM distributors may use it for better installation
   from CD, e.g. by using a boot floppy and bootstrapping a bigger RAM
   disk via initrd from CD; or by booting via a loader like LOADLIN or
   directly from the CD-ROM, and loading the RAM disk from CD without need
   of floppies.

Obsolete root change mechanism[137]¶

   The following mechanism was used before the introduction of pivot_root.
   Current kernels still support it, but you should _not_ rely on its
   continued availability.

   It works by mounting the "real" root device (i.e. the one set with rdev
   in the kernel image or with root=... at the boot command line) as the
   root file system when linuxrc exits. The initrd file system is then
   unmounted, or, if it is still busy, moved to a directory /initrd, if
   such a directory exists on the new root file system.

   In order to use this mechanism, you do not have to specify the boot
   command options root, init, or rw. (If specified, they will affect the
   real root file system, not the initrd environment.)

   If /proc is mounted, the "real" root device can be changed from within
   linuxrc by writing the number of the new root FS device to the special
   file /proc/sys/kernel/real-root-dev, e.g.:
# echo 0x301 >/proc/sys/kernel/real-root-dev

   Note that the mechanism is incompatible with NFS and similar file
   systems.

   This old, deprecated mechanism is commonly called change_root, while
   the new, supported mechanism is called pivot_root.

Mixed change_root and pivot_root mechanism[138]¶

   In case you did not want to use root=/dev/ram0 to trigger the
   pivot_root mechanism, you may create both /linuxrc and /sbin/init in
   your initrd image.

   /linuxrc would contain only the following:
#! /bin/sh
mount -n -t proc proc /proc
echo 0x0100 >/proc/sys/kernel/real-root-dev
umount -n /proc

   Once linuxrc exited, the kernel would mount again your initrd as root,
   this time executing /sbin/init. Again, it would be the duty of this
   init to build the right environment (maybe using the root= device
   passed on the cmdline) before the final execution of the real
   /sbin/init.

Resources[139]¶

   [140]1
          Almesberger, Werner; "Booting Linux: The History and the Future"
          [141]https://www.almesberger.net/cv/papers/ols2k-9.ps.gz

   [142]2
          newlib package (experimental), with initrd example
          [143]https://www.sourceware.org/newlib/

   [144]3
          util-linux: Miscellaneous utilities for Linux
          [145]https://www.kernel.org/pub/linux/utils/util-linux/

   ©The kernel development community. | Powered by [146]Sphinx 5.0.1 &
   [147]Alabaster 0.7.12 | [148]Page source

References

   1. https://docs.kernel.org/genindex.html
   2. https://docs.kernel.org/search.html
   3. https://docs.kernel.org/admin-guide/iostats.html
   4. https://docs.kernel.org/admin-guide/hw_random.html
   5. https://docs.kernel.org/index.html
   6. https://docs.kernel.org/process/development-process.html
   7. https://docs.kernel.org/process/submitting-patches.html
   8. https://docs.kernel.org/process/code-of-conduct.html
   9. https://docs.kernel.org/maintainer/index.html
  10. https://docs.kernel.org/process/index.html
  11. https://docs.kernel.org/core-api/index.html
  12. https://docs.kernel.org/driver-api/index.html
  13. https://docs.kernel.org/subsystem-apis.html
  14. https://docs.kernel.org/locking/index.html
  15. https://docs.kernel.org/process/license-rules.html
  16. https://docs.kernel.org/doc-guide/index.html
  17. https://docs.kernel.org/dev-tools/index.html
  18. https://docs.kernel.org/dev-tools/testing-overview.html
  19. https://docs.kernel.org/kernel-hacking/index.html
  20. https://docs.kernel.org/trace/index.html
  21. https://docs.kernel.org/fault-injection/index.html
  22. https://docs.kernel.org/livepatch/index.html
  23. https://docs.kernel.org/rust/index.html
  24. https://docs.kernel.org/admin-guide/index.html
  25. https://docs.kernel.org/admin-guide/README.html
  26. https://docs.kernel.org/admin-guide/kernel-parameters.html
  27. https://docs.kernel.org/admin-guide/devices.html
  28. https://docs.kernel.org/admin-guide/sysctl/index.html
  29. https://docs.kernel.org/admin-guide/abi.html
  30. https://docs.kernel.org/admin-guide/features.html
  31. https://docs.kernel.org/admin-guide/hw-vuln/index.html
  32. https://docs.kernel.org/admin-guide/reporting-issues.html
  33. https://docs.kernel.org/admin-guide/reporting-regressions.html
  34. https://docs.kernel.org/admin-guide/bug-hunting.html
  35. https://docs.kernel.org/admin-guide/bug-bisect.html
  36. https://docs.kernel.org/admin-guide/tainted-kernels.html
  37. https://docs.kernel.org/admin-guide/ramoops.html
  38. https://docs.kernel.org/admin-guide/dynamic-debug-howto.html
  39. https://docs.kernel.org/admin-guide/init.html
  40. https://docs.kernel.org/admin-guide/kdump/index.html
  41. https://docs.kernel.org/admin-guide/perf/index.html
  42. https://docs.kernel.org/admin-guide/pstore-blk.html
  43. https://docs.kernel.org/admin-guide/sysfs-rules.html
  44. https://docs.kernel.org/admin-guide/workload-tracing.html
  45. https://docs.kernel.org/admin-guide/acpi/index.html
  46. https://docs.kernel.org/admin-guide/aoe/index.html
  47. https://docs.kernel.org/admin-guide/auxdisplay/index.html
  48. https://docs.kernel.org/admin-guide/bcache.html
  49. https://docs.kernel.org/admin-guide/binderfs.html
  50. https://docs.kernel.org/admin-guide/binfmt-misc.html
  51. https://docs.kernel.org/admin-guide/blockdev/index.html
  52. https://docs.kernel.org/admin-guide/bootconfig.html
  53. https://docs.kernel.org/admin-guide/braille-console.html
  54. https://docs.kernel.org/admin-guide/btmrvl.html
  55. https://docs.kernel.org/admin-guide/cgroup-v1/index.html
  56. https://docs.kernel.org/admin-guide/cgroup-v2.html
  57. https://docs.kernel.org/admin-guide/cifs/index.html
  58. https://docs.kernel.org/admin-guide/clearing-warn-once.html
  59. https://docs.kernel.org/admin-guide/cpu-load.html
  60. https://docs.kernel.org/admin-guide/cputopology.html
  61. https://docs.kernel.org/admin-guide/dell_rbu.html
  62. https://docs.kernel.org/admin-guide/device-mapper/index.html
  63. https://docs.kernel.org/admin-guide/edid.html
  64. https://docs.kernel.org/admin-guide/efi-stub.html
  65. https://docs.kernel.org/admin-guide/ext4.html
  66. https://docs.kernel.org/admin-guide/filesystem-monitoring.html
  67. https://docs.kernel.org/admin-guide/nfs/index.html
  68. https://docs.kernel.org/admin-guide/gpio/index.html
  69. https://docs.kernel.org/admin-guide/highuid.html
  70. https://docs.kernel.org/admin-guide/hw_random.html
  71. https://docs.kernel.org/admin-guide/initrd.html?highlight=initrd
  72. https://docs.kernel.org/admin-guide/initrd.html?highlight=initrd#operation
  73. https://docs.kernel.org/admin-guide/initrd.html?highlight=initrd#boot-command-line-options
  74. https://docs.kernel.org/admin-guide/initrd.html?highlight=initrd#compressed-cpio-images
  75. https://docs.kernel.org/admin-guide/initrd.html?highlight=initrd#installation
  76. https://docs.kernel.org/admin-guide/initrd.html?highlight=initrd#changing-the-root-device
  77. https://docs.kernel.org/admin-guide/initrd.html?highlight=initrd#usage-scenarios
  78. https://docs.kernel.org/admin-guide/initrd.html?highlight=initrd#obsolete-root-change-mechanism
  79. https://docs.kernel.org/admin-guide/initrd.html?highlight=initrd#mixed-change-root-and-pivot-root-mechanism
  80. https://docs.kernel.org/admin-guide/initrd.html?highlight=initrd#resources
  81. https://docs.kernel.org/admin-guide/iostats.html
  82. https://docs.kernel.org/admin-guide/java.html
  83. https://docs.kernel.org/admin-guide/jfs.html
  84. https://docs.kernel.org/admin-guide/kernel-per-CPU-kthreads.html
  85. https://docs.kernel.org/admin-guide/laptops/index.html
  86. https://docs.kernel.org/admin-guide/lcd-panel-cgram.html
  87. https://docs.kernel.org/admin-guide/ldm.html
  88. https://docs.kernel.org/admin-guide/lockup-watchdogs.html
  89. https://docs.kernel.org/admin-guide/LSM/index.html
  90. https://docs.kernel.org/admin-guide/md.html
  91. https://docs.kernel.org/admin-guide/media/index.html
  92. https://docs.kernel.org/admin-guide/mm/index.html
  93. https://docs.kernel.org/admin-guide/module-signing.html
  94. https://docs.kernel.org/admin-guide/mono.html
  95. https://docs.kernel.org/admin-guide/namespaces/index.html
  96. https://docs.kernel.org/admin-guide/numastat.html
  97. https://docs.kernel.org/admin-guide/parport.html
  98. https://docs.kernel.org/admin-guide/perf-security.html
  99. https://docs.kernel.org/admin-guide/pm/index.html
 100. https://docs.kernel.org/admin-guide/pnp.html
 101. https://docs.kernel.org/admin-guide/rapidio.html
 102. https://docs.kernel.org/admin-guide/ras.html
 103. https://docs.kernel.org/admin-guide/rtc.html
 104. https://docs.kernel.org/admin-guide/serial-console.html
 105. https://docs.kernel.org/admin-guide/svga.html
 106. https://docs.kernel.org/admin-guide/syscall-user-dispatch.html
 107. https://docs.kernel.org/admin-guide/sysrq.html
 108. https://docs.kernel.org/admin-guide/thermal/index.html
 109. https://docs.kernel.org/admin-guide/thunderbolt.html
 110. https://docs.kernel.org/admin-guide/ufs.html
 111. https://docs.kernel.org/admin-guide/unicode.html
 112. https://docs.kernel.org/admin-guide/vga-softcursor.html
 113. https://docs.kernel.org/admin-guide/video-output.html
 114. https://docs.kernel.org/admin-guide/xfs.html
 115. https://docs.kernel.org/kbuild/index.html
 116. https://docs.kernel.org/admin-guide/reporting-issues.html
 117. https://docs.kernel.org/tools/index.html
 118. https://docs.kernel.org/userspace-api/index.html
 119. https://docs.kernel.org/firmware-guide/index.html
 120. https://docs.kernel.org/devicetree/index.html
 121. https://docs.kernel.org/arch.html
 122. https://docs.kernel.org/staging/index.html
 123. https://docs.kernel.org/translations/index.html
 124. https://docs.kernel.org/_sources/admin-guide/initrd.rst.txt
 125. https://docs.kernel.org/admin-guide/initrd.html?highlight=initrd#using-the-initial-ram-disk-initrd
 126. mailto:werner.almesberger%40epfl.ch
 127. mailto:lermen%40fgan.de
 128. https://docs.kernel.org/admin-guide/initrd.html?highlight=initrd#f1
 129. https://docs.kernel.org/admin-guide/initrd.html?highlight=initrd#operation
 130. https://docs.kernel.org/admin-guide/initrd.html?highlight=initrd#boot-command-line-options
 131. https://docs.kernel.org/admin-guide/initrd.html?highlight=initrd#compressed-cpio-images
 132. https://docs.kernel.org/admin-guide/initrd.html?highlight=initrd#installation
 133. https://docs.kernel.org/admin-guide/initrd.html?highlight=initrd#f2
 134. https://docs.kernel.org/admin-guide/initrd.html?highlight=initrd#changing-the-root-device
 135. https://docs.kernel.org/admin-guide/initrd.html?highlight=initrd#f3
 136. https://docs.kernel.org/admin-guide/initrd.html?highlight=initrd#usage-scenarios
 137. https://docs.kernel.org/admin-guide/initrd.html?highlight=initrd#obsolete-root-change-mechanism
 138. https://docs.kernel.org/admin-guide/initrd.html?highlight=initrd#mixed-change-root-and-pivot-root-mechanism
 139. https://docs.kernel.org/admin-guide/initrd.html?highlight=initrd#resources
 140. https://docs.kernel.org/admin-guide/initrd.html?highlight=initrd#id1
 141. https://www.almesberger.net/cv/papers/ols2k-9.ps.gz
 142. https://docs.kernel.org/admin-guide/initrd.html?highlight=initrd#id2
 143. https://www.sourceware.org/newlib/
 144. https://docs.kernel.org/admin-guide/initrd.html?highlight=initrd#id3
 145. https://www.kernel.org/pub/linux/utils/util-linux/
 146. http://sphinx-doc.org/
 147. https://github.com/bitprophet/alabaster
 148. https://docs.kernel.org/_sources/admin-guide/initrd.rst.txt
